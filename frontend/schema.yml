openapi: 3.0.3
info:
  title: ""
  version: 0.0.0
paths:
  /api/compete/{episode_id}/match/:
    get:
      operationId: compete_match_list
      description: A viewset for viewing and retrieving Matches.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedMatchList"
          description: ""
  /api/compete/{episode_id}/match/{id}/:
    get:
      operationId: compete_match_retrieve
      description: A viewset for viewing and retrieving Matches.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
          description: ""
  /api/compete/{episode_id}/match/{id}/publish_public_bracket/:
    post:
      operationId: compete_match_publish_public_bracket_create
      description: Publish the result of a tournament match to the public bracket.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "200":
          description: No response body
  /api/compete/{episode_id}/match/{id}/rating_update/:
    post:
      operationId: compete_match_rating_update_create
      description: Try to finalize the rating of this match.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "200":
          description: No response body
  /api/compete/{episode_id}/match/{id}/report/:
    post:
      operationId: compete_match_report_create
      description: Report the outcome of this match on Saturn.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - compete
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MatchReportRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/MatchReportRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/MatchReportRequest"
        required: true
      security:
        - jwtAuth: []
      responses:
        "204":
          description: Report has been received
        "409":
          description: This match was already finalized
  /api/compete/{episode_id}/match/historical_rating/:
    get:
      operationId: compete_match_historical_rating_retrieve
      description: |-
        Provides a list of historical ratings for a team in a given episode.
        Supports filtering by team ID or defaults to the current user's team
        if no team ID is provided.

        Parameters:
            - request (Request) - The HTTP request object.
            - pk (int, optional) - The primary key of the object. Defaults to None.
            - episode_id (int) - The ID of the episode to filter the ratings by.

        Query Parameters:
            - team_id (int, optional) - The team ID for which to retrieve
            historical ratings. If not provided, defaults to the team of the
            requesting user.

        Returns:
            Response: A JSON response containing:
                - 200 OK: Returns a serialized representation of the team's
                historical ratings if found.
                - 204 No Content: If no ranked matches are found for the specified team.
                - 400 Bad Request: If the specified team could not be found.

        Raises:
            - 400 Bad Request: If neither a valid team ID is provided nor can a team be
            determined from the current user.

        Permissions:
            Requires `IsEpisodeMutable` permission class.

        Notes:
            - The function does not paginate results.
            - The function returns an empty list if no valid team is found.
            - Historical ratings are ordered by match creation date.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: query
          name: team_id
          schema:
            type: integer
          description: Optional teamID to filter for. Defaults to your own team.
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No ranked matches found.
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoricalRating"
          description: ""
        "400":
          description: Could not find requested team.
  /api/compete/{episode_id}/match/historical_rating_topN/:
    get:
      operationId: compete_match_historical_rating_topN_list
      description:
        List the historical top N rankings, N should be <= 10 and defaults
        to 10
      parameters:
        - in: query
          name: N
          schema:
            type: integer
          description: number of top teams to get ratings for, defaults to 10
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No ranked matches found.
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HistoricalRating"
          description: ""
        "400":
          description: "Invalid parameter: N must be less than or equal to 10"
  /api/compete/{episode_id}/match/scrimmage/:
    get:
      operationId: compete_match_scrimmage_list
      description: List all scrimmages that a particular team participated in.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - in: query
          name: team_id
          schema:
            type: integer
          description: A team to filter for. Defaults to your own team.
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedMatchList"
          description: ""
  /api/compete/{episode_id}/match/scrimmaging_record/:
    get:
      operationId: compete_match_scrimmaging_record_retrieve
      description: |-
        Retrieve the scrimmaging win-loss-tie record for a team.

        Returns a JSON object containing the team's record in ranked,
        unranked, and overall matches.
        The record is broken down into wins, losses, and ties for each category.

        Query Parameters:
        - team_id (optional): ID of the team to retrieve the record for.
                              If not provided, uses the authenticated user's team.

        Returns:
        - 200 OK: Successfully retrieved the team's scrimmaging record.
        - 400 Bad Request: If no team_id is provided and the user is not associated
                              with a team, or if the provided team_id is invalid.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: query
          name: team_id
          schema:
            type: integer
          description: A team to filter for. Defaults to your own team.
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScrimmageRecord"
          description: ""
        "400":
          description: No team found with the given ID.
  /api/compete/{episode_id}/match/tournament/:
    get:
      operationId: compete_match_tournament_list
      description: |-
        List matches played in a tournament, or in all tournaments if not specified.
        Passing the external_id_private of a tournament allows match lookup for the
        tournament, even if it's private. Client uses the external_id_private parameter
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: query
          name: external_id_private
          schema:
            type: string
          description: A private id to filter for.
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - in: query
          name: round_id
          schema:
            type: integer
          description: A tournament round to filter for.
        - in: query
          name: team_id
          schema:
            type: integer
          description: A team to filter for.
        - in: query
          name: tournament_id
          schema:
            type: string
          description: A tournament to filter for.
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedMatchList"
          description: ""
  /api/compete/{episode_id}/request/:
    post:
      operationId: compete_request_create
      description: A viewset for creating and responding to Scrimmage Requests.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - compete
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScrimmageRequestRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ScrimmageRequestRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ScrimmageRequestRequest"
        required: true
      security:
        - jwtAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScrimmageRequest"
          description: ""
  /api/compete/{episode_id}/request/{id}/:
    delete:
      operationId: compete_request_destroy
      description: Cancel a scrimmage request.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No response body
  /api/compete/{episode_id}/request/{id}/accept/:
    post:
      operationId: compete_request_accept_create
      description: Accept a scrimmage request.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "204":
          description: Scrimmage request has been accepted
  /api/compete/{episode_id}/request/{id}/reject/:
    post:
      operationId: compete_request_reject_create
      description: Reject a scrimmage request.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "204":
          description: Scrimmage request has been rejected
  /api/compete/{episode_id}/request/inbox/:
    get:
      operationId: compete_request_inbox_list
      description: Get all pending scrimmage requests received.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedScrimmageRequestList"
          description: ""
  /api/compete/{episode_id}/request/outbox/:
    get:
      operationId: compete_request_outbox_list
      description: Get all pending scrimmage requests sent.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedScrimmageRequestList"
          description: ""
  /api/compete/{episode_id}/submission/:
    get:
      operationId: compete_submission_list
      description: A viewset for creating and retrieving Submissions.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedSubmissionList"
          description: ""
    post:
      operationId: compete_submission_create
      description: |-
        Create a new submission. This operation creates a submission record in the
        database, saves the source code to the storage bucket on Google cloud, and
        enqueues the submission for compilation on Saturn.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - compete
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                package:
                  type: string
                description:
                  type: string
                source_code:
                  type: string
                  format: binary
      security:
        - jwtAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submission"
          description: ""
  /api/compete/{episode_id}/submission/{id}/:
    get:
      operationId: compete_submission_retrieve
      description: A viewset for creating and retrieving Submissions.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Submission"
          description: ""
  /api/compete/{episode_id}/submission/{id}/download/:
    get:
      operationId: compete_submission_download_retrieve
      description: Download the source code associated with a submission.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmissionDownload"
          description: ""
  /api/compete/{episode_id}/submission/{id}/report/:
    post:
      operationId: compete_submission_report_create
      description: Report the outcome of this submission on Saturn.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - compete
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmissionReportRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/SubmissionReportRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/SubmissionReportRequest"
        required: true
      security:
        - jwtAuth: []
      responses:
        "204":
          description: Report has been received
        "409":
          description: This submission was already finalized
  /api/compete/{episode_id}/submission/tournament/:
    get:
      operationId: compete_submission_tournament_list
      description: Retrieve the submissions used in tournaments by the current team..
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - compete
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TournamentSubmission"
          description: ""
  /api/episode/{episode_id}/map/:
    get:
      operationId: episode_map_list
      description: A viewset for retrieving Maps.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - episode
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GameMap"
          description: ""
  /api/episode/{episode_id}/map/{id}/:
    get:
      operationId: episode_map_retrieve
      description: A viewset for retrieving Maps.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - episode
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameMap"
          description: ""
  /api/episode/{episode_id}/tournament/:
    get:
      operationId: episode_tournament_list
      description: A viewset for retrieving Tournaments.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - episode
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedTournamentList"
          description: ""
  /api/episode/{episode_id}/tournament/{id}/:
    get:
      operationId: episode_tournament_retrieve
      description: A viewset for retrieving Tournaments.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - episode
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tournament"
          description: ""
  /api/episode/{episode_id}/tournament/{tournament}/round/:
    get:
      operationId: episode_tournament_round_list
      description: A viewset for retrieving tournament rounds.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - in: path
          name: tournament
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - episode
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedTournamentRoundList"
          description: ""
  /api/episode/{episode_id}/tournament/{tournament}/round/{id}/:
    get:
      operationId: episode_tournament_round_retrieve
      description: A viewset for retrieving tournament rounds.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: path
          name: tournament
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - episode
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TournamentRound"
          description: ""
  /api/episode/{episode_id}/tournament/next/:
    get:
      operationId: episode_tournament_next_retrieve
      description:
        Retrieve the next upcoming tournament, as ordered by submission
        freeze time.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - episode
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tournament"
          description: ""
  /api/episode/e/:
    get:
      operationId: episode_e_list
      description: A viewset for retrieving Episodes.
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - episode
      security:
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedEpisodeList"
          description: ""
  /api/episode/e/{id}/:
    get:
      operationId: episode_e_retrieve
      description: A viewset for retrieving Episodes.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - episode
      security:
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Episode"
          description: ""
  /api/episode/e/{id}/autoscrim/:
    post:
      operationId: episode_e_autoscrim_create
      description: Trigger a round of autoscrimmages.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - episode
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AutoscrimRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AutoscrimRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/AutoscrimRequest"
        required: true
      security:
        - jwtAuth: []
      responses:
        "204":
          description: Created successfully
  /api/specs/:
    get:
      operationId: specs_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
        - in: query
          name: format
          schema:
            type: string
            enum:
              - json
              - yaml
        - in: query
          name: lang
          schema:
            type: string
            enum:
              - af
              - ar
              - ar-dz
              - ast
              - az
              - be
              - bg
              - bn
              - br
              - bs
              - ca
              - cs
              - cy
              - da
              - de
              - dsb
              - el
              - en
              - en-au
              - en-gb
              - eo
              - es
              - es-ar
              - es-co
              - es-mx
              - es-ni
              - es-ve
              - et
              - eu
              - fa
              - fi
              - fr
              - fy
              - ga
              - gd
              - gl
              - he
              - hi
              - hr
              - hsb
              - hu
              - hy
              - ia
              - id
              - ig
              - io
              - is
              - it
              - ja
              - ka
              - kab
              - kk
              - km
              - kn
              - ko
              - ky
              - lb
              - lt
              - lv
              - mk
              - ml
              - mn
              - mr
              - ms
              - my
              - nb
              - ne
              - nl
              - nn
              - os
              - pa
              - pl
              - pt
              - pt-br
              - ro
              - ru
              - sk
              - sl
              - sq
              - sr
              - sr-latn
              - sv
              - sw
              - ta
              - te
              - tg
              - th
              - tk
              - tr
              - tt
              - udm
              - uk
              - ur
              - uz
              - vi
              - zh-hans
              - zh-hant
      tags:
        - specs
      security:
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ""
  /api/team/{episode_id}/requirement/:
    get:
      operationId: team_requirement_list
      description: A viewset for retrieving and checking class requirements.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - team
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedClassRequirementList"
          description: ""
  /api/team/{episode_id}/requirement/{id}/:
    get:
      operationId: team_requirement_retrieve
      description: A viewset for retrieving and checking class requirements.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - team
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassRequirement"
          description: ""
  /api/team/{episode_id}/requirement/{id}/check/:
    get:
      operationId: team_requirement_check_retrieve
      description: A viewset for retrieving and checking class requirements.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - team
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPassed"
          description: ""
  /api/team/{episode_id}/requirement/{id}/compute/:
    get:
      operationId: team_requirement_compute_retrieve
      description: A viewset for retrieving and checking class requirements.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - team
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPassed"
          description: ""
  /api/team/{episode_id}/requirement/report/:
    get:
      operationId: team_requirement_report_retrieve
      description: Retrieve or update team strategy report
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - team
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No response body
    put:
      operationId: team_requirement_report_update
      description: Retrieve or update team strategy report
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - team
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamReportRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TeamReportRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TeamReportRequest"
        required: true
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No response body
  /api/team/{episode_id}/t/:
    get:
      operationId: team_t_list
      description: |-
        A viewset for retrieving and updating all team/team profile info.

        When creating a team, add the logged in user as the sole member.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - name: ordering
          required: false
          in: query
          description: Which field to use when ordering the results.
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: search
          required: false
          in: query
          description: A search term.
          schema:
            type: string
      tags:
        - team
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedTeamPublicList"
          description: ""
    post:
      operationId: team_t_create
      description: |-
        A viewset for retrieving and updating all team/team profile info.

        When creating a team, add the logged in user as the sole member.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - team
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamCreateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TeamCreateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TeamCreateRequest"
        required: true
      security:
        - jwtAuth: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamCreate"
          description: ""
  /api/team/{episode_id}/t/{id}/:
    get:
      operationId: team_t_retrieve
      description: |-
        A viewset for retrieving and updating all team/team profile info.

        When creating a team, add the logged in user as the sole member.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      tags:
        - team
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamPublic"
          description: ""
  /api/team/{episode_id}/t/avatar/:
    post:
      operationId: team_t_avatar_create
      description: Update uploaded avatar.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - team
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No response body
  /api/team/{episode_id}/t/join/:
    post:
      operationId: team_t_join_create
      description: |-
        A viewset for retrieving and updating all team/team profile info.

        When creating a team, add the logged in user as the sole member.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - team
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamJoinRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TeamJoinRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TeamJoinRequest"
        required: true
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No response body
  /api/team/{episode_id}/t/leave/:
    post:
      operationId: team_t_leave_create
      description: Leave a team.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - team
      security:
        - jwtAuth: []
      responses:
        "200":
          description: No response body
  /api/team/{episode_id}/t/me/:
    get:
      operationId: team_t_me_retrieve
      description: Retrieve or update information about the current team.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - team
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamPrivate"
          description: ""
    put:
      operationId: team_t_me_update
      description: Retrieve or update information about the current team.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - team
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamPrivateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TeamPrivateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TeamPrivateRequest"
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamPrivate"
          description: ""
    patch:
      operationId: team_t_me_partial_update
      description: Retrieve or update information about the current team.
      parameters:
        - in: path
          name: episode_id
          schema:
            type: string
            pattern: ^[^\/.]+$
          required: true
      tags:
        - team
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedTeamPrivateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedTeamPrivateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedTeamPrivateRequest"
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamPrivate"
          description: ""
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
        - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenObtainPairRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenObtainPairRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenObtainPairRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenObtainPair"
          description: ""
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
        - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRefreshRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenRefreshRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenRefreshRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRefresh"
          description: ""
  /api/token/verify/:
    post:
      operationId: token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
        - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenVerifyRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenVerifyRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenVerifyRequest"
        required: true
      responses:
        "200":
          description: No response body
  /api/user/password_reset/:
    post:
      operationId: user_password_reset_create
      description: |-
        An Api View which provides a method to request a password reset token based on an e-mail address

        Sends a signal reset_password_token_created when a reset token was created
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/EmailRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/EmailRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Email"
          description: ""
  /api/user/password_reset/confirm/:
    post:
      operationId: user_password_reset_confirm_create
      description:
        An Api View which provides a method to reset a password based on
        a unique token
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordTokenRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordTokenRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordTokenRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordToken"
          description: ""
  /api/user/password_reset/validate_token/:
    post:
      operationId: user_password_reset_validate_token_create
      description: An Api View which provides a method to verify that a token is valid
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetTokenRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ResetTokenRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ResetTokenRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResetToken"
          description: ""
  /api/user/u/:
    post:
      operationId: user_u_create
      description: A viewset for retrieving and updating all user info.
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
        required: true
      security:
        - jwtAuth: []
        - {}
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreate"
          description: ""
  /api/user/u/{id}/:
    get:
      operationId: user_u_retrieve
      description: A viewset for retrieving and updating all user info.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this user.
          required: true
      tags:
        - user
      security:
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPublic"
          description: ""
  /api/user/u/{id}/teams/:
    get:
      operationId: user_u_teams_retrieve
      description: Retrieve all teams associated with a user.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: A unique integer value identifying this user.
          required: true
      tags:
        - user
      security:
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/TeamPublic"
          description: ""
  /api/user/u/avatar/:
    post:
      operationId: user_u_avatar_create
      description: Update uploaded avatar.
      tags:
        - user
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      security:
        - jwtAuth: []
      responses:
        "204":
          description: No response body
  /api/user/u/me/:
    get:
      operationId: user_u_me_retrieve
      description: Retrieve or update information about the logged-in user.
      tags:
        - user
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPrivate"
          description: ""
    put:
      operationId: user_u_me_update
      description: Retrieve or update information about the logged-in user.
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPrivateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserPrivateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserPrivateRequest"
        required: true
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPrivate"
          description: ""
    patch:
      operationId: user_u_me_partial_update
      description: Retrieve or update information about the logged-in user.
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedUserPrivateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedUserPrivateRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedUserPrivateRequest"
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPrivate"
          description: ""
  /api/user/u/resume/:
    get:
      operationId: user_u_resume_retrieve
      description: Retrieve or update the uploaded resume.
      tags:
        - user
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResume"
          description: ""
    put:
      operationId: user_u_resume_update
      description: Retrieve or update the uploaded resume.
      tags:
        - user
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                resume:
                  type: string
                  format: binary
      security:
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResume"
          description: ""
components:
  schemas:
    AutoscrimRequest:
      type: object
      properties:
        best_of:
          type: integer
          minimum: 1
      required:
        - best_of
    ClassRequirement:
      type: object
      properties:
        episode:
          type: string
        reference_player:
          type: integer
        maps:
          type: array
          items:
            type: integer
        min_score:
          type: integer
          maximum: 32767
          minimum: 0
      required:
        - episode
        - maps
        - min_score
        - reference_player
    CountryEnum:
      enum:
        - AF
        - AX
        - AL
        - DZ
        - AS
        - AD
        - AO
        - AI
        - AQ
        - AG
        - AR
        - AM
        - AW
        - AU
        - AT
        - AZ
        - BS
        - BH
        - BD
        - BB
        - BY
        - BE
        - BZ
        - BJ
        - BM
        - BT
        - BO
        - BQ
        - BA
        - BW
        - BV
        - BR
        - IO
        - BN
        - BG
        - BF
        - BI
        - CV
        - KH
        - CM
        - CA
        - KY
        - CF
        - TD
        - CL
        - CN
        - CX
        - CC
        - CO
        - KM
        - CG
        - CD
        - CK
        - CR
        - CI
        - HR
        - CU
        - CW
        - CY
        - CZ
        - DK
        - DJ
        - DM
        - DO
        - EC
        - EG
        - SV
        - GQ
        - ER
        - EE
        - SZ
        - ET
        - FK
        - FO
        - FJ
        - FI
        - FR
        - GF
        - PF
        - TF
        - GA
        - GM
        - GE
        - DE
        - GH
        - GI
        - GR
        - GL
        - GD
        - GP
        - GU
        - GT
        - GG
        - GN
        - GW
        - GY
        - HT
        - HM
        - VA
        - HN
        - HK
        - HU
        - IS
        - IN
        - ID
        - IR
        - IQ
        - IE
        - IM
        - IL
        - IT
        - JM
        - JP
        - JE
        - JO
        - KZ
        - KE
        - KI
        - KW
        - KG
        - LA
        - LV
        - LB
        - LS
        - LR
        - LY
        - LI
        - LT
        - LU
        - MO
        - MG
        - MW
        - MY
        - MV
        - ML
        - MT
        - MH
        - MQ
        - MR
        - MU
        - YT
        - MX
        - FM
        - MD
        - MC
        - MN
        - ME
        - MS
        - MA
        - MZ
        - MM
        - NA
        - NR
        - NP
        - NL
        - NC
        - NZ
        - NI
        - NE
        - NG
        - NU
        - NF
        - KP
        - MK
        - MP
        - "NO"
        - OM
        - PK
        - PW
        - PS
        - PA
        - PG
        - PY
        - PE
        - PH
        - PN
        - PL
        - PT
        - PR
        - QA
        - RE
        - RO
        - RU
        - RW
        - BL
        - SH
        - KN
        - LC
        - MF
        - PM
        - VC
        - WS
        - SM
        - ST
        - SA
        - SN
        - RS
        - SC
        - SL
        - SG
        - SX
        - SK
        - SI
        - SB
        - SO
        - ZA
        - GS
        - KR
        - SS
        - ES
        - LK
        - SD
        - SR
        - SJ
        - SE
        - CH
        - SY
        - TW
        - TJ
        - TZ
        - TH
        - TL
        - TG
        - TK
        - TO
        - TT
        - TN
        - TR
        - TM
        - TC
        - TV
        - UG
        - UA
        - AE
        - GB
        - UM
        - US
        - UY
        - UZ
        - VU
        - VE
        - VN
        - VG
        - VI
        - WF
        - EH
        - YE
        - ZM
        - ZW
      type: string
    EligibilityCriterion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        icon:
          type: string
          readOnly: true
      required:
        - description
        - icon
        - id
        - title
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
    EmailRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
        - email
    Episode:
      type: object
      properties:
        name_short:
          type: string
          maxLength: 16
          pattern: ^[-a-zA-Z0-9_]+$
        name_long:
          type: string
          maxLength: 128
        blurb:
          type: string
        game_release:
          type: string
          format: date-time
        language:
          $ref: "#/components/schemas/LanguageEnum"
        scaffold:
          type: string
          format: uri
          maxLength: 200
        artifact_name:
          type: string
          maxLength: 32
        release_version_client:
          type: string
          maxLength: 32
        release_version_public:
          type: string
          maxLength: 32
        release_version_saturn:
          type: string
          maxLength: 32
        eligibility_criteria:
          type: array
          items:
            $ref: "#/components/schemas/EligibilityCriterion"
        frozen:
          type: boolean
          readOnly: true
      required:
        - eligibility_criteria
        - frozen
        - game_release
        - language
        - name_long
        - name_short
    GameMap:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        episode:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        is_public:
          type: boolean
          readOnly: true
      required:
        - episode
        - id
        - is_public
        - name
    GenderEnum:
      enum:
        - F
        - M
        - N
        - "*"
        - "?"
      type: string
    HistoricalRating:
      type: object
      properties:
        team_id:
          type: integer
        team_rating:
          $ref: "#/components/schemas/TeamRating"
      required:
        - team_id
    LanguageEnum:
      enum:
        - java8
        - java21
        - py3
      type: string
    Match:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          allOf:
            - $ref: "#/components/schemas/StatusBccEnum"
          readOnly: true
        episode:
          type: string
          readOnly: true
        tournament_round:
          allOf:
            - $ref: "#/components/schemas/TournamentRound"
          nullable: true
        participants:
          type: array
          items:
            $ref: "#/components/schemas/MatchParticipant"
          nullable: true
        maps:
          type: array
          items:
            type: string
          readOnly: true
          nullable: true
        alternate_order:
          type: boolean
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        is_ranked:
          type: boolean
          readOnly: true
        replay_url:
          type: string
          readOnly: true
          nullable: true
      required:
        - alternate_order
        - created
        - episode
        - id
        - is_ranked
        - maps
        - participants
        - replay_url
        - status
    MatchParticipant:
      type: object
      properties:
        team:
          type: integer
          readOnly: true
        teamname:
          type: string
          readOnly: true
        submission:
          type: integer
          readOnly: true
        match:
          type: integer
          readOnly: true
        player_index:
          type: integer
          readOnly: true
        score:
          type: integer
          readOnly: true
          nullable: true
        rating:
          type: number
          format: double
          readOnly: true
        old_rating:
          type: number
          format: double
          readOnly: true
      required:
        - match
        - old_rating
        - player_index
        - rating
        - score
        - submission
        - team
        - teamname
    MatchRating:
      type: object
      properties:
        rating:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
      required:
        - rating
        - timestamp
    MatchReportRequest:
      type: object
      properties:
        invocation:
          $ref: "#/components/schemas/SaturnInvocationRequest"
        scores:
          type: array
          items:
            type: integer
            minimum: 0
      required:
        - invocation
    PaginatedClassRequirementList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/ClassRequirement"
    PaginatedEpisodeList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/Episode"
    PaginatedMatchList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/Match"
    PaginatedScrimmageRequestList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/ScrimmageRequest"
    PaginatedSubmissionList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/Submission"
    PaginatedTeamPublicList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/TeamPublic"
    PaginatedTournamentList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/Tournament"
    PaginatedTournamentRoundList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/TournamentRound"
    PasswordToken:
      type: object
      properties:
        password:
          type: string
        token:
          type: string
      required:
        - password
        - token
    PasswordTokenRequest:
      type: object
      properties:
        password:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
        - password
        - token
    PatchedTeamPrivateRequest:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/TeamProfilePrivateRequest"
    PatchedUserPrivateRequest:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/UserProfilePrivateRequest"
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        first_name:
          type: string
          minLength: 1
          maxLength: 30
        last_name:
          type: string
          minLength: 1
          maxLength: 30
    PlayerOrderEnum:
      enum:
        - +
        - "-"
        - "?"
      type: string
    ReleaseStatusEnum:
      enum:
        - 0
        - 1
        - 2
      type: integer
    ResetToken:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    ResetTokenRequest:
      type: object
      properties:
        token:
          type: string
          minLength: 1
      required:
        - token
    SaturnInvocationRequest:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/StatusBccEnum"
        logs:
          type: string
        interrupted:
          type: boolean
      required:
        - status
    ScrimmageRecord:
      type: object
      properties:
        team_id:
          type: integer
        Ranked:
          $ref: "#/components/schemas/ScrimmageRecordVariant"
        Unranked:
          $ref: "#/components/schemas/ScrimmageRecordVariant"
        All:
          $ref: "#/components/schemas/ScrimmageRecordVariant"
      required:
        - All
        - Ranked
        - Unranked
        - team_id
    ScrimmageRecordVariant:
      type: object
      properties:
        wins:
          type: integer
        losses:
          type: integer
        ties:
          type: integer
      required:
        - losses
        - ties
        - wins
    ScrimmageRequest:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        episode:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        status:
          allOf:
            - $ref: "#/components/schemas/ScrimmageStatusEnum"
          readOnly: true
        is_ranked:
          type: boolean
        requested_by:
          type: integer
          readOnly: true
        requested_by_name:
          type: string
          readOnly: true
        requested_by_rating:
          type: number
          format: double
          readOnly: true
        requested_to:
          type: integer
        requested_to_name:
          type: string
          readOnly: true
        requested_to_rating:
          type: number
          format: double
          readOnly: true
        player_order:
          $ref: "#/components/schemas/PlayerOrderEnum"
        maps:
          type: array
          items:
            type: string
          readOnly: true
      required:
        - created
        - episode
        - id
        - is_ranked
        - maps
        - player_order
        - requested_by
        - requested_by_name
        - requested_by_rating
        - requested_to
        - requested_to_name
        - requested_to_rating
        - status
    ScrimmageRequestRequest:
      type: object
      properties:
        is_ranked:
          type: boolean
        requested_to:
          type: integer
        player_order:
          $ref: "#/components/schemas/PlayerOrderEnum"
        map_names:
          type: array
          items:
            type: string
            minLength: 1
          writeOnly: true
          maxItems: 10
      required:
        - is_ranked
        - map_names
        - player_order
        - requested_to
    ScrimmageStatusEnum:
      enum:
        - P
        - Y
        - N
      type: string
    Status526Enum:
      enum:
        - R
        - X
        - S
        - O
      type: string
    StatusBccEnum:
      enum:
        - NEW
        - QUE
        - RUN
        - TRY
        - OK!
        - ERR
        - CAN
      type: string
    StyleEnum:
      enum:
        - SE
        - DE
      type: string
    Submission:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          allOf:
            - $ref: "#/components/schemas/StatusBccEnum"
          readOnly: true
        logs:
          type: string
          readOnly: true
        episode:
          type: string
          readOnly: true
        team:
          type: integer
          readOnly: true
        teamname:
          type: string
          readOnly: true
        user:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        accepted:
          type: boolean
          readOnly: true
        package:
          type: string
          maxLength: 32
        description:
          type: string
          maxLength: 128
      required:
        - accepted
        - created
        - episode
        - id
        - logs
        - status
        - team
        - teamname
        - user
        - username
    SubmissionDownload:
      type: object
      properties:
        ready:
          type: boolean
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        reason:
          type: string
          readOnly: true
      required:
        - ready
        - reason
        - url
    SubmissionReportRequest:
      type: object
      properties:
        invocation:
          $ref: "#/components/schemas/SaturnInvocationRequest"
        accepted:
          type: boolean
      required:
        - invocation
    TeamCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          $ref: "#/components/schemas/TeamProfilePrivate"
        episode:
          type: string
        name:
          type: string
          pattern: ^[ -~]*$
          maxLength: 32
        members:
          type: array
          items:
            $ref: "#/components/schemas/UserPublic"
          readOnly: true
        join_key:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        status:
          allOf:
            - $ref: "#/components/schemas/Status526Enum"
          readOnly: true
      required:
        - id
        - join_key
        - members
        - name
        - status
    TeamCreateRequest:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/TeamProfilePrivateRequest"
        episode:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
          pattern: ^[ -~]*$
          maxLength: 32
      required:
        - name
    TeamJoinRequest:
      type: object
      properties:
        join_key:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
      required:
        - join_key
        - name
    TeamPrivate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          $ref: "#/components/schemas/TeamProfilePrivate"
        episode:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        members:
          type: array
          items:
            $ref: "#/components/schemas/UserPublic"
          readOnly: true
        join_key:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        status:
          allOf:
            - $ref: "#/components/schemas/Status526Enum"
          readOnly: true
      required:
        - episode
        - id
        - join_key
        - members
        - name
        - status
    TeamPrivateRequest:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/TeamProfilePrivateRequest"
    TeamProfilePrivate:
      type: object
      properties:
        quote:
          type: string
          pattern: ^[ -~]*$
          maxLength: 80
        biography:
          type: string
          maxLength: 1024
        has_avatar:
          type: boolean
          readOnly: true
        has_report:
          type: boolean
          readOnly: true
        avatar_url:
          type: string
          readOnly: true
        rating:
          type: number
          format: double
          readOnly: true
        auto_accept_ranked:
          type: boolean
        auto_accept_unranked:
          type: boolean
        eligible_for:
          type: array
          items:
            type: integer
      required:
        - avatar_url
        - has_avatar
        - has_report
        - rating
    TeamProfilePrivateRequest:
      type: object
      properties:
        quote:
          type: string
          pattern: ^[ -~]*$
          maxLength: 80
        biography:
          type: string
          maxLength: 1024
        auto_accept_ranked:
          type: boolean
        auto_accept_unranked:
          type: boolean
        eligible_for:
          type: array
          items:
            type: integer
    TeamProfilePublic:
      type: object
      properties:
        quote:
          type: string
          pattern: ^[ -~]*$
          maxLength: 80
        biography:
          type: string
          maxLength: 1024
        has_avatar:
          type: boolean
          readOnly: true
        avatar_url:
          type: string
          readOnly: true
        rating:
          type: number
          format: double
          readOnly: true
        auto_accept_ranked:
          type: boolean
        auto_accept_unranked:
          type: boolean
        eligible_for:
          type: array
          items:
            type: integer
      required:
        - avatar_url
        - has_avatar
        - rating
    TeamPublic:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          $ref: "#/components/schemas/TeamProfilePublic"
        episode:
          type: string
          readOnly: true
        name:
          type: string
          pattern: ^[ -~]*$
          maxLength: 32
        members:
          type: array
          items:
            $ref: "#/components/schemas/UserPublic"
          readOnly: true
        status:
          allOf:
            - $ref: "#/components/schemas/Status526Enum"
          readOnly: true
        has_active_submission:
          type: string
          readOnly: true
      required:
        - episode
        - has_active_submission
        - id
        - members
        - name
        - status
    TeamRating:
      type: object
      properties:
        team:
          $ref: "#/components/schemas/TeamPublic"
        rating_history:
          type: array
          items:
            $ref: "#/components/schemas/MatchRating"
      required:
        - rating_history
        - team
    TeamReportRequest:
      type: object
      properties:
        report:
          type: string
          format: binary
          writeOnly: true
      required:
        - report
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
        - access
        - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
        - password
        - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
        - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
        - refresh
    TokenVerifyRequest:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
        - token
    Tournament:
      type: object
      properties:
        name_short:
          type: string
          maxLength: 32
          pattern: ^[-a-zA-Z0-9_]+$
        name_long:
          type: string
          maxLength: 128
        blurb:
          type: string
        episode:
          type: string
        style:
          $ref: "#/components/schemas/StyleEnum"
        display_date:
          type: string
          format: date
        eligibility_includes:
          type: array
          items:
            type: integer
        eligibility_excludes:
          type: array
          items:
            type: integer
        require_resume:
          type: boolean
        is_public:
          type: boolean
        submission_freeze:
          type: string
          format: date-time
        submission_unfreeze:
          type: string
          format: date-time
        is_eligible:
          type: boolean
          readOnly: true
      required:
        - display_date
        - episode
        - is_eligible
        - is_public
        - name_long
        - name_short
        - require_resume
        - style
        - submission_freeze
        - submission_unfreeze
    TournamentRound:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        tournament:
          type: string
        external_id:
          type: integer
          maximum: 32767
          minimum: -32768
          nullable: true
        name:
          type: string
          maxLength: 64
        maps:
          type: array
          items:
            type: integer
        release_status:
          allOf:
            - $ref: "#/components/schemas/ReleaseStatusEnum"
          minimum: -2147483648
          maximum: 2147483647
        display_order:
          type: integer
          maximum: 32767
          minimum: 0
      required:
        - display_order
        - id
        - name
        - tournament
    TournamentSubmission:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          allOf:
            - $ref: "#/components/schemas/StatusBccEnum"
          readOnly: true
        logs:
          type: string
          readOnly: true
        episode:
          type: string
          readOnly: true
        team:
          type: integer
          readOnly: true
        teamname:
          type: string
          readOnly: true
        user:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        accepted:
          type: boolean
          readOnly: true
        package:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        tournament:
          type: string
          readOnly: true
      required:
        - accepted
        - created
        - description
        - episode
        - id
        - logs
        - package
        - status
        - team
        - teamname
        - tournament
        - user
        - username
    UserCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          $ref: "#/components/schemas/UserProfilePrivate"
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
      required:
        - email
        - first_name
        - id
        - is_staff
        - last_name
        - username
    UserCreateRequest:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/UserProfilePrivateRequest"
        username:
          type: string
          minLength: 1
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 1
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        first_name:
          type: string
          minLength: 1
          maxLength: 30
        last_name:
          type: string
          minLength: 1
          maxLength: 30
      required:
        - email
        - first_name
        - last_name
        - password
        - username
    UserPassed:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
        passed:
          type: boolean
      required:
        - email
        - id
        - passed
        - username
    UserPrivate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          $ref: "#/components/schemas/UserProfilePrivate"
        username:
          type: string
          readOnly: true
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
      required:
        - email
        - first_name
        - id
        - is_staff
        - last_name
        - username
    UserPrivateRequest:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/UserProfilePrivateRequest"
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 254
        first_name:
          type: string
          minLength: 1
          maxLength: 30
        last_name:
          type: string
          minLength: 1
          maxLength: 30
      required:
        - email
        - first_name
        - last_name
    UserProfilePrivate:
      type: object
      properties:
        gender:
          $ref: "#/components/schemas/GenderEnum"
        gender_details:
          type: string
          maxLength: 32
        school:
          type: string
          maxLength: 128
        biography:
          type: string
          maxLength: 1024
        kerberos:
          type: string
          maxLength: 16
          pattern: ^[-a-zA-Z0-9_]+$
        avatar_url:
          type: string
          readOnly: true
        has_avatar:
          type: boolean
          readOnly: true
        has_resume:
          type: boolean
          readOnly: true
        country:
          $ref: "#/components/schemas/CountryEnum"
      required:
        - avatar_url
        - country
        - gender
        - has_avatar
        - has_resume
    UserProfilePrivateRequest:
      type: object
      properties:
        gender:
          $ref: "#/components/schemas/GenderEnum"
        gender_details:
          type: string
          maxLength: 32
        school:
          type: string
          maxLength: 128
        biography:
          type: string
          maxLength: 1024
        kerberos:
          type: string
          maxLength: 16
          pattern: ^[-a-zA-Z0-9_]+$
        country:
          $ref: "#/components/schemas/CountryEnum"
      required:
        - country
        - gender
    UserProfilePublic:
      type: object
      properties:
        school:
          type: string
          maxLength: 128
        biography:
          type: string
          maxLength: 1024
        avatar_url:
          type: string
          readOnly: true
        has_avatar:
          type: boolean
          readOnly: true
      required:
        - avatar_url
        - has_avatar
    UserProfilePublicRequest:
      type: object
      properties:
        school:
          type: string
          maxLength: 128
        biography:
          type: string
          maxLength: 1024
    UserPublic:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          $ref: "#/components/schemas/UserProfilePublic"
        username:
          type: string
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
      required:
        - id
        - is_staff
        - username
    UserPublicRequest:
      type: object
      properties:
        profile:
          $ref: "#/components/schemas/UserProfilePublicRequest"
        username:
          type: string
          minLength: 1
          description:
            Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
        - username
    UserResume:
      type: object
      properties:
        ready:
          type: boolean
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        reason:
          type: string
          readOnly: true
      required:
        - ready
        - reason
        - url
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
