/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AutoscrimRequest,
  Episode,
  GameMap,
  PaginatedEpisodeList,
  PaginatedTournamentList,
  PaginatedTournamentRoundList,
  Tournament,
  TournamentRound,
} from '../models';
import {
    AutoscrimRequestFromJSON,
    AutoscrimRequestToJSON,
    EpisodeFromJSON,
    EpisodeToJSON,
    GameMapFromJSON,
    GameMapToJSON,
    PaginatedEpisodeListFromJSON,
    PaginatedEpisodeListToJSON,
    PaginatedTournamentListFromJSON,
    PaginatedTournamentListToJSON,
    PaginatedTournamentRoundListFromJSON,
    PaginatedTournamentRoundListToJSON,
    TournamentFromJSON,
    TournamentToJSON,
    TournamentRoundFromJSON,
    TournamentRoundToJSON,
} from '../models';

export interface EpisodeEAutoscrimCreateRequest {
    id: string;
    autoscrimRequest: AutoscrimRequest;
}

export interface EpisodeEListRequest {
    page?: number;
}

export interface EpisodeERetrieveRequest {
    id: string;
}

export interface EpisodeMapListRequest {
    episodeId: string;
}

export interface EpisodeMapRetrieveRequest {
    episodeId: string;
    id: string;
}

export interface EpisodeTournamentListRequest {
    episodeId: string;
    page?: number;
}

export interface EpisodeTournamentNextRetrieveRequest {
    episodeId: string;
}

export interface EpisodeTournamentRetrieveRequest {
    episodeId: string;
    id: string;
}

export interface EpisodeTournamentRoundListRequest {
    episodeId: string;
    tournament: string;
    page?: number;
}

export interface EpisodeTournamentRoundRetrieveRequest {
    episodeId: string;
    id: string;
    tournament: string;
}

/**
 *
 */
export class EpisodeApi extends runtime.BaseAPI {

    /**
     * Trigger a round of autoscrimmages.
     */
    async episodeEAutoscrimCreateRaw(requestParameters: EpisodeEAutoscrimCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling episodeEAutoscrimCreate.');
        }

        if (requestParameters.autoscrimRequest === null || requestParameters.autoscrimRequest === undefined) {
            throw new runtime.RequiredError('autoscrimRequest','Required parameter requestParameters.autoscrimRequest was null or undefined when calling episodeEAutoscrimCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/episode/e/{id}/autoscrim/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AutoscrimRequestToJSON(requestParameters.autoscrimRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Trigger a round of autoscrimmages.
     */
    async episodeEAutoscrimCreate(requestParameters: EpisodeEAutoscrimCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.episodeEAutoscrimCreateRaw(requestParameters, initOverrides);
    }

    /**
     * A viewset for retrieving Episodes.
     */
    async episodeEListRaw(requestParameters: EpisodeEListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEpisodeList>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/episode/e/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEpisodeListFromJSON(jsonValue));
    }

    /**
     * A viewset for retrieving Episodes.
     */
    async episodeEList(requestParameters: EpisodeEListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEpisodeList> {
        const response = await this.episodeEListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A viewset for retrieving Episodes.
     */
    async episodeERetrieveRaw(requestParameters: EpisodeERetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Episode>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling episodeERetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/episode/e/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EpisodeFromJSON(jsonValue));
    }

    /**
     * A viewset for retrieving Episodes.
     */
    async episodeERetrieve(requestParameters: EpisodeERetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Episode> {
        const response = await this.episodeERetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A viewset for retrieving Maps.
     */
    async episodeMapListRaw(requestParameters: EpisodeMapListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GameMap>>> {
        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling episodeMapList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/episode/{episode_id}/map/`.replace(`{${"episode_id"}}`, encodeURIComponent(String(requestParameters.episodeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameMapFromJSON));
    }

    /**
     * A viewset for retrieving Maps.
     */
    async episodeMapList(requestParameters: EpisodeMapListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GameMap>> {
        const response = await this.episodeMapListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A viewset for retrieving Maps.
     */
    async episodeMapRetrieveRaw(requestParameters: EpisodeMapRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameMap>> {
        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling episodeMapRetrieve.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling episodeMapRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/episode/{episode_id}/map/{id}/`.replace(`{${"episode_id"}}`, encodeURIComponent(String(requestParameters.episodeId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameMapFromJSON(jsonValue));
    }

    /**
     * A viewset for retrieving Maps.
     */
    async episodeMapRetrieve(requestParameters: EpisodeMapRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameMap> {
        const response = await this.episodeMapRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A viewset for retrieving Tournaments.
     */
    async episodeTournamentListRaw(requestParameters: EpisodeTournamentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTournamentList>> {
        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling episodeTournamentList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/episode/{episode_id}/tournament/`.replace(`{${"episode_id"}}`, encodeURIComponent(String(requestParameters.episodeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTournamentListFromJSON(jsonValue));
    }

    /**
     * A viewset for retrieving Tournaments.
     */
    async episodeTournamentList(requestParameters: EpisodeTournamentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTournamentList> {
        const response = await this.episodeTournamentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the next upcoming tournament, as ordered by submission freeze time.
     */
    async episodeTournamentNextRetrieveRaw(requestParameters: EpisodeTournamentNextRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tournament>> {
        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling episodeTournamentNextRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/episode/{episode_id}/tournament/next/`.replace(`{${"episode_id"}}`, encodeURIComponent(String(requestParameters.episodeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TournamentFromJSON(jsonValue));
    }

    /**
     * Retrieve the next upcoming tournament, as ordered by submission freeze time.
     */
    async episodeTournamentNextRetrieve(requestParameters: EpisodeTournamentNextRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tournament> {
        const response = await this.episodeTournamentNextRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A viewset for retrieving Tournaments.
     */
    async episodeTournamentRetrieveRaw(requestParameters: EpisodeTournamentRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tournament>> {
        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling episodeTournamentRetrieve.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling episodeTournamentRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/episode/{episode_id}/tournament/{id}/`.replace(`{${"episode_id"}}`, encodeURIComponent(String(requestParameters.episodeId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TournamentFromJSON(jsonValue));
    }

    /**
     * A viewset for retrieving Tournaments.
     */
    async episodeTournamentRetrieve(requestParameters: EpisodeTournamentRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tournament> {
        const response = await this.episodeTournamentRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A viewset for retrieving tournament rounds.
     */
    async episodeTournamentRoundListRaw(requestParameters: EpisodeTournamentRoundListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTournamentRoundList>> {
        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling episodeTournamentRoundList.');
        }

        if (requestParameters.tournament === null || requestParameters.tournament === undefined) {
            throw new runtime.RequiredError('tournament','Required parameter requestParameters.tournament was null or undefined when calling episodeTournamentRoundList.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/episode/{episode_id}/tournament/{tournament}/round/`.replace(`{${"episode_id"}}`, encodeURIComponent(String(requestParameters.episodeId))).replace(`{${"tournament"}}`, encodeURIComponent(String(requestParameters.tournament))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTournamentRoundListFromJSON(jsonValue));
    }

    /**
     * A viewset for retrieving tournament rounds.
     */
    async episodeTournamentRoundList(requestParameters: EpisodeTournamentRoundListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTournamentRoundList> {
        const response = await this.episodeTournamentRoundListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A viewset for retrieving tournament rounds.
     */
    async episodeTournamentRoundRetrieveRaw(requestParameters: EpisodeTournamentRoundRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TournamentRound>> {
        if (requestParameters.episodeId === null || requestParameters.episodeId === undefined) {
            throw new runtime.RequiredError('episodeId','Required parameter requestParameters.episodeId was null or undefined when calling episodeTournamentRoundRetrieve.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling episodeTournamentRoundRetrieve.');
        }

        if (requestParameters.tournament === null || requestParameters.tournament === undefined) {
            throw new runtime.RequiredError('tournament','Required parameter requestParameters.tournament was null or undefined when calling episodeTournamentRoundRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/episode/{episode_id}/tournament/{tournament}/round/{id}/`.replace(`{${"episode_id"}}`, encodeURIComponent(String(requestParameters.episodeId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"tournament"}}`, encodeURIComponent(String(requestParameters.tournament))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TournamentRoundFromJSON(jsonValue));
    }

    /**
     * A viewset for retrieving tournament rounds.
     */
    async episodeTournamentRoundRetrieve(requestParameters: EpisodeTournamentRoundRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TournamentRound> {
        const response = await this.episodeTournamentRoundRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
