openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/compete/{episode_id}/match/:
    get:
      operationId: api_compete_match_list
      description: A viewset for viewing and retrieving Matches.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMatchList'
          description: ''
  /api/compete/{episode_id}/match/{id}/:
    get:
      operationId: api_compete_match_retrieve
      description: A viewset for viewing and retrieving Matches.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
          description: ''
  /api/compete/{episode_id}/match/{id}/publish_public_bracket/:
    post:
      operationId: api_compete_match_publish_public_bracket_create
      description: Publish the result of a tournament match to the public bracket.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/compete/{episode_id}/match/{id}/rating_update/:
    post:
      operationId: api_compete_match_rating_update_create
      description: Try to finalize the rating of this match.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/compete/{episode_id}/match/{id}/report/:
    post:
      operationId: api_compete_match_report_create
      description: Report the outcome of this match on Saturn.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchReport'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MatchReport'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MatchReport'
        required: true
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Report has been received
        '409':
          description: This match was already finalized
  /api/compete/{episode_id}/match/historical_rating/:
    get:
      operationId: api_compete_match_historical_rating_retrieve
      description: List the historical rating of a team.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: query
        name: team_id
        schema:
          type: integer
        description: A team to filter for. Defaults to your own team.
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No ranked matches found.
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoricalRating'
          description: ''
  /api/compete/{episode_id}/match/scrimmage/:
    get:
      operationId: api_compete_match_scrimmage_list
      description: List all scrimmages that a particular team participated in.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: team_id
        schema:
          type: integer
        description: A team to filter for. Defaults to your own team.
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMatchList'
          description: ''
  /api/compete/{episode_id}/match/tournament/:
    get:
      operationId: api_compete_match_tournament_list
      description: List matches played in a tournament.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: round_id
        schema:
          type: integer
        description: A tournament round to filter for.
      - in: query
        name: team_id
        schema:
          type: integer
        description: A team to filter for.
      - in: query
        name: tournament_id
        schema:
          type: string
        description: A tournament to filter for.
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMatchList'
          description: ''
  /api/compete/{episode_id}/request/:
    post:
      operationId: api_compete_request_create
      description: A viewset for creating and responding to Scrimmage Requests.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScrimmageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ScrimmageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ScrimmageRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScrimmageRequest'
          description: ''
  /api/compete/{episode_id}/request/{id}/:
    delete:
      operationId: api_compete_request_destroy
      description: Cancel a scrimmage request.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/compete/{episode_id}/request/{id}/accept/:
    post:
      operationId: api_compete_request_accept_create
      description: Accept a scrimmage request.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Scrimmage request has been accepted
  /api/compete/{episode_id}/request/{id}/reject/:
    post:
      operationId: api_compete_request_reject_create
      description: Reject a scrimmage request.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Scrimmage request has been rejected
  /api/compete/{episode_id}/request/inbox/:
    get:
      operationId: api_compete_request_inbox_list
      description: Get all pending scrimmage requests received.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedScrimmageRequestList'
          description: ''
  /api/compete/{episode_id}/request/outbox/:
    get:
      operationId: api_compete_request_outbox_list
      description: Get all pending scrimmage requests sent.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedScrimmageRequestList'
          description: ''
  /api/compete/{episode_id}/submission/:
    get:
      operationId: api_compete_submission_list
      description: A viewset for creating and retrieving Submissions.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSubmissionList'
          description: ''
    post:
      operationId: api_compete_submission_create
      description: |-
        Create a new submission. This operation creates a submission record in the
        database, saves the source code to the storage bucket on Google cloud, and
        enqueues the submission for compilation on Saturn.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Submission'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Submission'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
          description: ''
  /api/compete/{episode_id}/submission/{id}/:
    get:
      operationId: api_compete_submission_retrieve
      description: A viewset for creating and retrieving Submissions.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
          description: ''
  /api/compete/{episode_id}/submission/{id}/download/:
    get:
      operationId: api_compete_submission_download_retrieve
      description: Download the source code associated with a submission.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionDownload'
          description: ''
  /api/compete/{episode_id}/submission/{id}/report/:
    post:
      operationId: api_compete_submission_report_create
      description: Report the outcome of this submission on Saturn.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionReport'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubmissionReport'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubmissionReport'
        required: true
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Report has been received
        '409':
          description: This submission was already finalized
  /api/compete/{episode_id}/submission/tournament/:
    get:
      operationId: api_compete_submission_tournament_retrieve
      description: Retrieve the submissions used in tournaments by the current team..
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentSubmission'
          description: ''
  /api/episode/{episode_id}/map/:
    get:
      operationId: api_episode_map_list
      description: A viewset for retrieving Maps.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Map'
          description: ''
  /api/episode/{episode_id}/map/{id}/:
    get:
      operationId: api_episode_map_retrieve
      description: A viewset for retrieving Maps.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Map'
          description: ''
  /api/episode/{episode_id}/tournament/:
    get:
      operationId: api_episode_tournament_list
      description: A viewset for retrieving Tournaments.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTournamentList'
          description: ''
  /api/episode/{episode_id}/tournament/{id}/:
    get:
      operationId: api_episode_tournament_retrieve
      description: A viewset for retrieving Tournaments.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
          description: ''
  /api/episode/{episode_id}/tournament/{tournament}/round/:
    get:
      operationId: api_episode_tournament_round_list
      description: A viewset for retrieving tournament rounds.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: tournament
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTournamentRoundList'
          description: ''
  /api/episode/{episode_id}/tournament/{tournament}/round/{id}/:
    get:
      operationId: api_episode_tournament_round_retrieve
      description: A viewset for retrieving tournament rounds.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: tournament
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentRound'
          description: ''
  /api/episode/{episode_id}/tournament/next/:
    get:
      operationId: api_episode_tournament_next_retrieve
      description: Retrieve the next upcoming tournament, as ordered by submission
        freeze time.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
          description: ''
  /api/episode/e/:
    get:
      operationId: api_episode_e_list
      description: A viewset for retrieving Episodes.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEpisodeList'
          description: ''
  /api/episode/e/{id}/:
    get:
      operationId: api_episode_e_retrieve
      description: A viewset for retrieving Episodes.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode'
          description: ''
  /api/episode/e/{id}/autoscrim/:
    post:
      operationId: api_episode_e_autoscrim_create
      description: Trigger a round of autoscrimmages.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Autoscrim'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Autoscrim'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Autoscrim'
        required: true
      security:
      - jwtAuth: []
      responses:
        '204':
          description: Created successfully
  /api/specs/:
    get:
      operationId: api_specs_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/team/{episode_id}/requirement/:
    get:
      operationId: api_team_requirement_list
      description: A viewset for retrieving and checking class requirements.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedClassRequirementList'
          description: ''
  /api/team/{episode_id}/requirement/{id}/:
    get:
      operationId: api_team_requirement_retrieve
      description: A viewset for retrieving and checking class requirements.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassRequirement'
          description: ''
  /api/team/{episode_id}/requirement/{id}/check/:
    get:
      operationId: api_team_requirement_check_retrieve
      description: A viewset for retrieving and checking class requirements.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPassed'
          description: ''
  /api/team/{episode_id}/requirement/{id}/compute/:
    get:
      operationId: api_team_requirement_compute_retrieve
      description: A viewset for retrieving and checking class requirements.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPassed'
          description: ''
  /api/team/{episode_id}/requirement/report/:
    get:
      operationId: api_team_requirement_report_retrieve
      description: Retrieve or update team strategy report
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
    put:
      operationId: api_team_requirement_report_update
      description: Retrieve or update team strategy report
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamReport'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TeamReport'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TeamReport'
        required: true
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/team/{episode_id}/t/:
    get:
      operationId: api_team_t_list
      description: |-
        A viewset for retrieving and updating all team/team profile info.

        When creating a team, add the logged in user as the sole member.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTeamPublicList'
          description: ''
    post:
      operationId: api_team_t_create
      description: |-
        A viewset for retrieving and updating all team/team profile info.

        When creating a team, add the logged in user as the sole member.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TeamCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TeamCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamCreate'
          description: ''
  /api/team/{episode_id}/t/{id}/:
    get:
      operationId: api_team_t_retrieve
      description: |-
        A viewset for retrieving and updating all team/team profile info.

        When creating a team, add the logged in user as the sole member.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamPublic'
          description: ''
  /api/team/{episode_id}/t/avatar/:
    post:
      operationId: api_team_t_avatar_create
      description: Update uploaded avatar.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamAvatar'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TeamAvatar'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TeamAvatar'
        required: true
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/team/{episode_id}/t/join/:
    post:
      operationId: api_team_t_join_create
      description: |-
        A viewset for retrieving and updating all team/team profile info.

        When creating a team, add the logged in user as the sole member.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamJoin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TeamJoin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TeamJoin'
        required: true
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/team/{episode_id}/t/leave/:
    post:
      operationId: api_team_t_leave_create
      description: Leave a team.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/team/{episode_id}/t/me/:
    get:
      operationId: api_team_t_me_retrieve
      description: Retrieve or update information about the current team.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamPrivate'
          description: ''
    put:
      operationId: api_team_t_me_update
      description: Retrieve or update information about the current team.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPrivate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TeamPrivate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TeamPrivate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamPrivate'
          description: ''
    patch:
      operationId: api_team_t_me_partial_update
      description: Retrieve or update information about the current team.
      parameters:
      - in: path
        name: episode_id
        schema:
          type: string
          pattern: ^[^\/.]+$
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTeamPrivate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTeamPrivate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTeamPrivate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamPrivate'
          description: ''
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/token/verify/:
    post:
      operationId: api_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/user/password_reset/:
    post:
      operationId: api_user_password_reset_create
      description: |-
        An Api View which provides a method to request a password reset token based on an e-mail address

        Sends a signal reset_password_token_created when a reset token was created
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Email'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Email'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
  /api/user/password_reset/confirm/:
    post:
      operationId: api_user_password_reset_confirm_create
      description: An Api View which provides a method to reset a password based on
        a unique token
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordToken'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordToken'
          description: ''
  /api/user/password_reset/validate_token/:
    post:
      operationId: api_user_password_reset_validate_token_create
      description: An Api View which provides a method to verify that a token is valid
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetToken'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetToken'
          description: ''
  /api/user/u/:
    post:
      operationId: api_user_u_create
      description: A viewset for retrieving and updating all user info.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
  /api/user/u/{id}/:
    get:
      operationId: api_user_u_retrieve
      description: A viewset for retrieving and updating all user info.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
          description: ''
  /api/user/u/{id}/teams/:
    get:
      operationId: api_user_u_teams_retrieve
      description: Retrieve all teams associated with a user.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamPublic'
          description: ''
  /api/user/u/avatar/:
    post:
      operationId: api_user_u_avatar_create
      description: Update uploaded avatar.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAvatar'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAvatar'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAvatar'
        required: true
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/user/u/me/:
    get:
      operationId: api_user_u_me_retrieve
      description: Retrieve or update information about the logged-in user.
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPrivate'
          description: ''
    put:
      operationId: api_user_u_me_update
      description: Retrieve or update information about the logged-in user.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPrivate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserPrivate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserPrivate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPrivate'
          description: ''
    patch:
      operationId: api_user_u_me_partial_update
      description: Retrieve or update information about the logged-in user.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserPrivate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserPrivate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserPrivate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPrivate'
          description: ''
  /api/user/u/resume/:
    get:
      operationId: api_user_u_resume_retrieve
      description: Retrieve or update the uploaded resume.
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResume'
          description: ''
    put:
      operationId: api_user_u_resume_update
      description: Retrieve or update the uploaded resume.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResume'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserResume'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserResume'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResume'
          description: ''
components:
  schemas:
    Autoscrim:
      type: object
      properties:
        best_of:
          type: integer
          minimum: 1
      required:
      - best_of
    ClassRequirement:
      type: object
      properties:
        episode:
          type: string
        reference_player:
          type: integer
        maps:
          type: array
          items:
            type: integer
        min_score:
          type: integer
          maximum: 32767
          minimum: 0
      required:
      - episode
      - maps
      - min_score
      - reference_player
    CountryEnum:
      enum:
      - AF
      - AX
      - AL
      - DZ
      - AS
      - AD
      - AO
      - AI
      - AQ
      - AG
      - AR
      - AM
      - AW
      - AU
      - AT
      - AZ
      - BS
      - BH
      - BD
      - BB
      - BY
      - BE
      - BZ
      - BJ
      - BM
      - BT
      - BO
      - BQ
      - BA
      - BW
      - BV
      - BR
      - IO
      - BN
      - BG
      - BF
      - BI
      - CV
      - KH
      - CM
      - CA
      - KY
      - CF
      - TD
      - CL
      - CN
      - CX
      - CC
      - CO
      - KM
      - CG
      - CD
      - CK
      - CR
      - CI
      - HR
      - CU
      - CW
      - CY
      - CZ
      - DK
      - DJ
      - DM
      - DO
      - EC
      - EG
      - SV
      - GQ
      - ER
      - EE
      - SZ
      - ET
      - FK
      - FO
      - FJ
      - FI
      - FR
      - GF
      - PF
      - TF
      - GA
      - GM
      - GE
      - DE
      - GH
      - GI
      - GR
      - GL
      - GD
      - GP
      - GU
      - GT
      - GG
      - GN
      - GW
      - GY
      - HT
      - HM
      - VA
      - HN
      - HK
      - HU
      - IS
      - IN
      - ID
      - IR
      - IQ
      - IE
      - IM
      - IL
      - IT
      - JM
      - JP
      - JE
      - JO
      - KZ
      - KE
      - KI
      - KW
      - KG
      - LA
      - LV
      - LB
      - LS
      - LR
      - LY
      - LI
      - LT
      - LU
      - MO
      - MG
      - MW
      - MY
      - MV
      - ML
      - MT
      - MH
      - MQ
      - MR
      - MU
      - YT
      - MX
      - FM
      - MD
      - MC
      - MN
      - ME
      - MS
      - MA
      - MZ
      - MM
      - NA
      - NR
      - NP
      - NL
      - NC
      - NZ
      - NI
      - NE
      - NG
      - NU
      - NF
      - KP
      - MK
      - MP
      - 'NO'
      - OM
      - PK
      - PW
      - PS
      - PA
      - PG
      - PY
      - PE
      - PH
      - PN
      - PL
      - PT
      - PR
      - QA
      - RE
      - RO
      - RU
      - RW
      - BL
      - SH
      - KN
      - LC
      - MF
      - PM
      - VC
      - WS
      - SM
      - ST
      - SA
      - SN
      - RS
      - SC
      - SL
      - SG
      - SX
      - SK
      - SI
      - SB
      - SO
      - ZA
      - GS
      - KR
      - SS
      - ES
      - LK
      - SD
      - SR
      - SJ
      - SE
      - CH
      - SY
      - TW
      - TJ
      - TZ
      - TH
      - TL
      - TG
      - TK
      - TO
      - TT
      - TN
      - TR
      - TM
      - TC
      - TV
      - UG
      - UA
      - AE
      - GB
      - UM
      - US
      - UY
      - UZ
      - VU
      - VE
      - VN
      - VG
      - VI
      - WF
      - EH
      - YE
      - ZM
      - ZW
      type: string
    EligibilityCriterion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        icon:
          type: string
          readOnly: true
      required:
      - description
      - icon
      - id
      - title
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    Episode:
      type: object
      properties:
        name_short:
          type: string
          maxLength: 16
          pattern: ^[-a-zA-Z0-9_]+$
        name_long:
          type: string
          maxLength: 128
        blurb:
          type: string
        game_release:
          type: string
          format: date-time
        language:
          $ref: '#/components/schemas/LanguageEnum'
        scaffold:
          type: string
          format: uri
          maxLength: 200
        artifact_name:
          type: string
          maxLength: 32
        release_version_public:
          type: string
          maxLength: 32
        release_version_saturn:
          type: string
          maxLength: 32
        eligibility_criteria:
          type: array
          items:
            $ref: '#/components/schemas/EligibilityCriterion'
        frozen:
          type: boolean
          readOnly: true
      required:
      - eligibility_criteria
      - frozen
      - game_release
      - language
      - name_long
      - name_short
    GenderEnum:
      enum:
      - F
      - M
      - N
      - '*'
      - '?'
      type: string
    HistoricalRating:
      type: object
      properties:
        rating:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
      required:
      - rating
      - timestamp
    LanguageEnum:
      enum:
      - java8
      - py3
      type: string
    Map:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        episode:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        is_public:
          type: boolean
          readOnly: true
      required:
      - episode
      - id
      - is_public
      - name
    Match:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/StatusBccEnum'
          readOnly: true
        episode:
          type: string
          readOnly: true
        tournament_round:
          type: integer
          readOnly: true
          nullable: true
        participants:
          type: array
          items:
            $ref: '#/components/schemas/MatchParticipant'
        maps:
          type: array
          items:
            type: string
          readOnly: true
        alternate_order:
          type: boolean
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        is_ranked:
          type: boolean
          readOnly: true
        replay_url:
          type: string
          readOnly: true
      required:
      - alternate_order
      - created
      - episode
      - id
      - is_ranked
      - maps
      - participants
      - replay_url
      - status
      - tournament_round
    MatchParticipant:
      type: object
      properties:
        team:
          type: integer
          readOnly: true
        teamname:
          type: string
          readOnly: true
        submission:
          type: integer
          readOnly: true
        match:
          type: integer
          readOnly: true
        player_index:
          type: integer
          readOnly: true
        score:
          type: integer
          readOnly: true
          nullable: true
        rating:
          type: number
          format: double
          readOnly: true
        old_rating:
          type: number
          format: double
          readOnly: true
      required:
      - match
      - old_rating
      - player_index
      - rating
      - score
      - submission
      - team
      - teamname
    MatchReport:
      type: object
      properties:
        invocation:
          $ref: '#/components/schemas/SaturnInvocation'
        scores:
          type: array
          items:
            type: integer
            minimum: 0
      required:
      - invocation
    PaginatedClassRequirementList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ClassRequirement'
    PaginatedEpisodeList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Episode'
    PaginatedMatchList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Match'
    PaginatedScrimmageRequestList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ScrimmageRequest'
    PaginatedSubmissionList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Submission'
    PaginatedTeamPublicList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TeamPublic'
    PaginatedTournamentList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Tournament'
    PaginatedTournamentRoundList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TournamentRound'
    PasswordToken:
      type: object
      properties:
        password:
          type: string
        token:
          type: string
      required:
      - password
      - token
    PatchedTeamPrivate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          $ref: '#/components/schemas/TeamProfilePrivate'
        episode:
          type: string
        name:
          type: string
          readOnly: true
        members:
          type: array
          items:
            $ref: '#/components/schemas/UserPublic'
          readOnly: true
        join_key:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        status:
          allOf:
          - $ref: '#/components/schemas/Status526Enum'
          readOnly: true
    PatchedUserPrivate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          $ref: '#/components/schemas/UserProfilePrivate'
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
    PlayerOrderEnum:
      enum:
      - +
      - '-'
      - '?'
      type: string
    ReleaseStatusEnum:
      enum:
      - 0
      - 1
      - 2
      type: integer
    ResetToken:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    SaturnInvocation:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/StatusBccEnum'
        logs:
          type: string
        interrupted:
          type: boolean
      required:
      - status
    ScrimmageRequest:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        episode:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/ScrimmageRequestStatusEnum'
          readOnly: true
        is_ranked:
          type: boolean
        requested_by:
          type: integer
          readOnly: true
        requested_by_name:
          type: string
          readOnly: true
        requested_by_rating:
          type: number
          format: double
          readOnly: true
        requested_to:
          type: integer
        requested_to_name:
          type: string
          readOnly: true
        requested_to_rating:
          type: number
          format: double
          readOnly: true
        player_order:
          $ref: '#/components/schemas/PlayerOrderEnum'
        maps:
          type: array
          items:
            type: string
          readOnly: true
        map_names:
          type: array
          items:
            type: string
          writeOnly: true
          maxItems: 10
      required:
      - created
      - episode
      - id
      - is_ranked
      - map_names
      - maps
      - player_order
      - requested_by
      - requested_by_name
      - requested_by_rating
      - requested_to
      - requested_to_name
      - requested_to_rating
      - status
    ScrimmageRequestStatusEnum:
      enum:
      - P
      - Y
      - N
      type: string
    Status526Enum:
      enum:
      - R
      - X
      - S
      - O
      type: string
    StatusBccEnum:
      enum:
      - NEW
      - QUE
      - RUN
      - TRY
      - OK!
      - ERR
      - CAN
      type: string
    StyleEnum:
      enum:
      - SE
      - DE
      type: string
    Submission:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/StatusBccEnum'
          readOnly: true
        logs:
          type: string
          readOnly: true
        episode:
          type: string
          readOnly: true
        team:
          type: integer
          readOnly: true
        teamname:
          type: string
          readOnly: true
        user:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        accepted:
          type: boolean
          readOnly: true
        package:
          type: string
          maxLength: 32
        description:
          type: string
          maxLength: 128
        source_code:
          type: string
          format: uri
          writeOnly: true
      required:
      - accepted
      - created
      - episode
      - id
      - logs
      - source_code
      - status
      - team
      - teamname
      - user
      - username
    SubmissionDownload:
      type: object
      properties:
        ready:
          type: boolean
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        reason:
          type: string
          readOnly: true
      required:
      - ready
      - reason
      - url
    SubmissionReport:
      type: object
      properties:
        invocation:
          $ref: '#/components/schemas/SaturnInvocation'
        accepted:
          type: boolean
      required:
      - invocation
    TeamAvatar:
      type: object
      properties:
        avatar:
          type: string
          format: uri
          writeOnly: true
      required:
      - avatar
    TeamCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          $ref: '#/components/schemas/TeamProfilePrivate'
        episode:
          type: string
        name:
          type: string
          pattern: ^[ -~]*$
          maxLength: 32
        members:
          type: array
          items:
            $ref: '#/components/schemas/UserPublic'
          readOnly: true
        join_key:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        status:
          allOf:
          - $ref: '#/components/schemas/Status526Enum'
          readOnly: true
      required:
      - id
      - join_key
      - members
      - name
      - status
    TeamJoin:
      type: object
      properties:
        join_key:
          type: string
        name:
          type: string
      required:
      - join_key
      - name
    TeamPrivate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          $ref: '#/components/schemas/TeamProfilePrivate'
        episode:
          type: string
        name:
          type: string
          readOnly: true
        members:
          type: array
          items:
            $ref: '#/components/schemas/UserPublic'
          readOnly: true
        join_key:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        status:
          allOf:
          - $ref: '#/components/schemas/Status526Enum'
          readOnly: true
      required:
      - id
      - join_key
      - members
      - name
      - status
    TeamProfilePrivate:
      type: object
      properties:
        quote:
          type: string
          pattern: ^[ -~]*$
          maxLength: 80
        biography:
          type: string
          maxLength: 1024
        has_avatar:
          type: boolean
          readOnly: true
        has_report:
          type: boolean
        avatar_url:
          type: string
          readOnly: true
        rating:
          type: number
          format: double
          readOnly: true
        auto_accept_ranked:
          type: boolean
        auto_accept_unranked:
          type: boolean
        eligible_for:
          type: array
          items:
            type: integer
      required:
      - avatar_url
      - has_avatar
      - rating
    TeamProfilePublic:
      type: object
      properties:
        quote:
          type: string
          pattern: ^[ -~]*$
          maxLength: 80
        biography:
          type: string
          maxLength: 1024
        has_avatar:
          type: boolean
          readOnly: true
        avatar_url:
          type: string
          readOnly: true
        rating:
          type: number
          format: double
          readOnly: true
        auto_accept_ranked:
          type: boolean
        auto_accept_unranked:
          type: boolean
        eligible_for:
          type: array
          items:
            type: integer
      required:
      - avatar_url
      - has_avatar
      - rating
    TeamPublic:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          $ref: '#/components/schemas/TeamProfilePublic'
        episode:
          type: string
          readOnly: true
        name:
          type: string
          pattern: ^[ -~]*$
          maxLength: 32
        members:
          type: array
          items:
            $ref: '#/components/schemas/UserPublic'
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/Status526Enum'
          readOnly: true
        has_active_submission:
          type: string
          readOnly: true
      required:
      - episode
      - has_active_submission
      - id
      - members
      - name
      - status
    TeamReport:
      type: object
      properties:
        report:
          type: string
          format: uri
          writeOnly: true
      required:
      - report
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    Tournament:
      type: object
      properties:
        name_short:
          type: string
          maxLength: 32
          pattern: ^[-a-zA-Z0-9_]+$
        name_long:
          type: string
          maxLength: 128
        blurb:
          type: string
        episode:
          type: string
        style:
          $ref: '#/components/schemas/StyleEnum'
        display_date:
          type: string
          format: date
        eligibility_includes:
          type: array
          items:
            type: integer
        eligibility_excludes:
          type: array
          items:
            type: integer
        require_resume:
          type: boolean
        is_public:
          type: boolean
        submission_freeze:
          type: string
          format: date-time
        submission_unfreeze:
          type: string
          format: date-time
        is_eligible:
          type: boolean
          readOnly: true
      required:
      - display_date
      - episode
      - is_eligible
      - is_public
      - name_long
      - name_short
      - require_resume
      - style
      - submission_freeze
      - submission_unfreeze
    TournamentRound:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        tournament:
          type: string
        external_id:
          type: integer
          maximum: 32767
          minimum: -32768
          nullable: true
        name:
          type: string
          maxLength: 64
        maps:
          type: array
          items:
            type: integer
        release_status:
          allOf:
          - $ref: '#/components/schemas/ReleaseStatusEnum'
          minimum: -2147483648
          maximum: 2147483647
      required:
      - id
      - name
      - tournament
    TournamentSubmission:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/StatusBccEnum'
          readOnly: true
        logs:
          type: string
          readOnly: true
        episode:
          type: string
          readOnly: true
        team:
          type: integer
          readOnly: true
        teamname:
          type: string
          readOnly: true
        user:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        accepted:
          type: boolean
          readOnly: true
        package:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        source_code:
          type: string
          format: uri
          writeOnly: true
        tournament:
          type: string
          readOnly: true
      required:
      - accepted
      - created
      - description
      - episode
      - id
      - logs
      - package
      - source_code
      - status
      - team
      - teamname
      - tournament
      - user
      - username
    UserAvatar:
      type: object
      properties:
        avatar:
          type: string
          format: uri
          writeOnly: true
      required:
      - avatar
    UserCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          $ref: '#/components/schemas/UserProfilePrivate'
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
      required:
      - email
      - first_name
      - id
      - is_staff
      - last_name
      - password
      - username
    UserPassed:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
        passed:
          type: boolean
      required:
      - email
      - id
      - passed
      - username
    UserPrivate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          $ref: '#/components/schemas/UserProfilePrivate'
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
      required:
      - email
      - first_name
      - id
      - is_staff
      - last_name
      - username
    UserProfilePrivate:
      type: object
      properties:
        gender:
          $ref: '#/components/schemas/GenderEnum'
        gender_details:
          type: string
          maxLength: 32
        school:
          type: string
          maxLength: 128
        biography:
          type: string
          maxLength: 1024
        kerberos:
          type: string
          maxLength: 16
          pattern: ^[-a-zA-Z0-9_]+$
        avatar_url:
          type: string
          readOnly: true
        has_avatar:
          type: boolean
          readOnly: true
        has_resume:
          type: boolean
          readOnly: true
        country:
          $ref: '#/components/schemas/CountryEnum'
      required:
      - avatar_url
      - country
      - gender
      - has_avatar
      - has_resume
    UserProfilePublic:
      type: object
      properties:
        school:
          type: string
          maxLength: 128
        biography:
          type: string
          maxLength: 1024
        avatar_url:
          type: string
          readOnly: true
        has_avatar:
          type: boolean
          readOnly: true
      required:
      - avatar_url
      - has_avatar
    UserPublic:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        profile:
          $ref: '#/components/schemas/UserProfilePublic'
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        is_staff:
          type: boolean
          readOnly: true
          title: Staff status
          description: Designates whether the user can log into this admin site.
      required:
      - id
      - is_staff
      - username
    UserResume:
      type: object
      properties:
        resume:
          type: string
          format: uri
          writeOnly: true
        ready:
          type: boolean
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        reason:
          type: string
          readOnly: true
      required:
      - ready
      - reason
      - resume
      - url
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
